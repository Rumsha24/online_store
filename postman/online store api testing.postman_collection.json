{
	"info": {
		"_postman_id": "e02bc750-fd36-4647-93ac-285021b3fa6e",
		"name": "online store api testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45883394",
		"_collection_link": "https://rumshaahmed-411120.postman.co/workspace/Rumsha-Ahmed's-Workspace~327f9588-544b-438e-8cc9-c20c5ce447cf/collection/45883394-e02bc750-fd36-4647-93ac-285021b3fa6e?action=share&source=collection_link&creator=45883394"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has a success field that is true\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.success).to.exist.and.to.equal(true);\r",
							"});\r",
							"\r",
							"\r",
							"// Adjust your test to be more realistic:\r",
							"pm.test(\"Response time is reasonable\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500); // More generous threshold\r",
							"});\r",
							"\r",
							"pm.test(\"Response message is a string and not undefined\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "email",
							"value": "rumsha26@gmail.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost/online_store/api/login.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"online_store",
						"api",
						"login.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "View Cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has a success field that is a boolean\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('success').that.is.a('boolean');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Cart array is present and contains at least one item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.cart).to.exist.and.to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain required properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object').that.includes.keys('success', 'cart', 'message');\r",
							"    pm.expect(responseData.cart).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.cart.forEach(item => {\r",
							"        pm.expect(item).to.include.keys('productID', 'description', 'image', 'price', 'shippingCost', 'quantity');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "http://localhost/online_store/api/view_cart.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"online_store",
						"api",
						"view_cart.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add to cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('success', 'message');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Success is a boolean value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.success).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message is a string and can be empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.be.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "product_id",
							"value": "7",
							"type": "text"
						},
						{
							"key": "quantity",
							"value": "2",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost/online_store/api/add_to_cart.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"online_store",
						"api",
						"add_to_cart.php"
					],
					"query": [
						{
							"key": "product_id",
							"value": "7",
							"disabled": true
						},
						{
							"key": "quantity",
							"value": "2",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Remove from cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains 'success' field and it is a boolean\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('success').that.is.a('boolean');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains 'message' field and it is a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('message').that.is.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "product_id",
							"value": "7",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost/online_store/api/remove_from_cart.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"online_store",
						"api",
						"remove_from_cart.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('success', 'cart', 'message');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the cart object structure and types\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('success', 'cart', 'message');\r",
							"    \r",
							"    pm.expect(responseData.success).to.be.a('boolean');\r",
							"    pm.expect(responseData.message).to.be.a('string');\r",
							"\r",
							"    pm.expect(responseData.cart).to.be.an('array');\r",
							"\r",
							"    responseData.cart.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an('object');\r",
							"        pm.expect(item).to.have.all.keys('productID', 'description', 'image', 'price', 'shippingCost', 'quantity');\r",
							"        \r",
							"        pm.expect(item.productID).to.be.a('number');\r",
							"        pm.expect(item.description).to.be.a('string');\r",
							"        pm.expect(item.image).to.be.a('string');\r",
							"        pm.expect(item.price).to.be.a('string');\r",
							"        pm.expect(item.shippingCost).to.be.a('string');\r",
							"        pm.expect(item.quantity).to.be.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"ProductID and Quantity are non-negative integers\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    \r",
							"    responseData.cart.forEach(function(item) {\r",
							"        pm.expect(item.productID).to.be.a('number').and.to.be.at.least(0, \"ProductID should be a non-negative integer\");\r",
							"        pm.expect(item.quantity).to.be.a('number').and.to.be.at.least(0, \"Quantity should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "product_id",
							"value": "8",
							"type": "text"
						},
						{
							"key": "quantity",
							"value": "2",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost/online_store/api/update_cart.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"online_store",
						"api",
						"update_cart.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "Product List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('success', 'products', 'message');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the product object schema\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.products).to.be.an('array').that.is.not.empty;\r",
							"    \r",
							"    responseData.products.forEach(product => {\r",
							"        pm.expect(product).to.be.an('object');\r",
							"        pm.expect(product).to.have.all.keys('productID', 'name', 'description', 'image', 'price', 'shippingCost', 'size', 'fragrance_family', 'top_notes', 'middle_notes', 'base_notes', 'stock_quantity', 'is_featured');\r",
							"        pm.expect(product.productID).to.be.a('number');\r",
							"        pm.expect(product.name).to.be.a('string');\r",
							"        pm.expect(product.description).to.be.a('string');\r",
							"        pm.expect(product.image).to.be.a('string');\r",
							"        pm.expect(product.price).to.be.a('string');\r",
							"        pm.expect(product.shippingCost).to.be.a('string');\r",
							"        pm.expect(product.size).to.be.a('string');\r",
							"        pm.expect(product.fragrance_family).to.be.a('string');\r",
							"        pm.expect(product.top_notes).to.be.a('string');\r",
							"        pm.expect(product.middle_notes).to.be.a('string');\r",
							"        pm.expect(product.base_notes).to.be.a('string');\r",
							"        pm.expect(product.stock_quantity).to.be.a('number');\r",
							"        pm.expect(product.is_featured).to.be.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Price and Shipping Cost are in valid numeric format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.products).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.products.forEach(product => {\r",
							"        pm.expect(product.price).to.satisfy(value => !isNaN(value) && Number(value) >= 0, \"Price should be a valid non-negative number\");\r",
							"        pm.expect(product.shippingCost).to.satisfy(value => !isNaN(value) && Number(value) >= 0, \"Shipping Cost should be a valid non-negative number\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost/online_store/api/products.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"online_store",
						"api",
						"products.php"
					]
				}
			},
			"response": []
		}
	]
}